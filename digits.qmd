# Classifying hand-written digits

In this tutorial, we will try to classify hand-written digits using the tools seen in previous chapters.

## Loading packages
```{julia}
using MLDatasets
using Images, Makie, CairoMakie
using Distances
using Ripserer, PersistenceDiagrams#, Plots
using StatsBase: mean
import Plots;
```

## The dataset

MNIST is a dataset consisting of ??? hand-written digits. Each digit is a 28x28 grayscale image, that is: a 28x28 matrix of values 0 to 1. To get this dataset, run

```{julia}
n_total = 60000
train_x, train_y = MNIST(split=:train)[:];
train_x = train_x[:, :, 1:n_total]
train_y = train_y[1:n_total]
```

If the console asks you to download some data, just press `y`.

Next, we transpose the digits and plot some of them in a mosaic

```{julia}
# store all digits in a figs variable
figs = [train_x[:, :, i]' |> Matrix for i ∈ 1:size(train_x)[3]]
```

```{julia}
n = 10

# convert to Gray so we can plot a mosaic
figs_plot = [fig .|> Gray for fig in figs[1:n^2]]
mosaicview(figs_plot, nrow = n, rowmajor = true)
```

## Preparing for war

What topological tools can be useful to distinguish between different numbers?

Persistence homology alone won't be of much help. All digits are connected, so the 0-persistence is useless. For the 1-dimensional persistence,

- 0, 2 (not always), 6, 8 and 9 contain holes;
- 1, 3, 4, 5, 7 do not contain holes.

What if we starting chopping the digits with sublevels of some functions? Two come readily to the mind: the density and the excentricity. The excentricity is able to detect "edges" of our figures, and the density will see where there are many points together.

### From matrices to points in the plane

In order to calculate the excentricity, we need to convert the digits to points in $\mathbb{R}^2$. A simple function can do that:

```{julia}
function img_to_points(img, threshold = 0.3)
    ids = findall(x -> x >= threshold, img)
    pts = getindex.(ids, [1 2])
end
```

Notice that we had to define a threshold: coordinates with values less than the threshold are not considered.

Let's also define a function to plot the digit in $\mathbb{R}^2$:

```{julia}
function plot_digit(pt, values = :black)
    f = Figure();
    ax = Makie.Axis(f[1, 1], autolimitaspect = 1, yreversed = true)
    scatter!(ax, pt[:, 2], pt[:, 1]; markersize = 40, marker = :rect, color = values)
    if values isa Vector{<:Real}
        Colorbar(f[1, 2])
    end
    f
end
```

We can see that it works as expected:

```{julia}
pts = img_to_points.(figs);
pt = pts[1];
plot_digit(pt)
```

The excentricity of a metric space $(X, d)$ is a measure of how far a point is from the "center". It is defined as follows for each $x \in X$:

$$
e(x) = \sum_{y \in X} \frac{d(x, y)}{N}
$$

where $N$ is the amount of points of $X$.

Define a function that takes a digit in $\mathbb{R}^2$ and return ???

```{julia}
function pt_to_excen(pt)
    dists = pairwise(Euclidean(), pt')
    excentricity = [mean(c) for c ∈ eachcol(dists)]
    exc = zeros(28, 28)

    m = maximum(excentricity)
    # excentricity = m .- excentricity

    for (row, (i, j)) ∈ enumerate(eachrow(pt))
        exc[i, j] = excentricity[row]
    end

    return exc, excentricity
end
```

```{julia}
excs = pt_to_excen.(pts);
```

Plot a digit with it's corresponding excentricity

```{julia}
i = 5
pt = pts[i]
exc_2d, exc = excs[i]
plot_digit(pt, exc)
```

Looks good! Now the image-version as a heatmap:

```{julia}
heatmap(exc_2d |> rotr90)
```

Calculate all the persistence diagrams using sublevel filtration

```{julia}
pds = map(excs) do ex
    m = maximum(ex[1])
    e2 = m .- ex[1]
    ripserer(Cubical(e2), cutoff = 0.5)
end;
```

and check the first one

```{julia}
pd = pds[i]
pd |> barcode
```

```{julia}
pds_0 = pds .|> first
pds_1 = pds .|> last
imgs_0 = PersistenceImage(pds_0; sigma = 1, size = 5)
imgs_1 = PersistenceImage(pds_1; sigma = 1, size = 5)
```

```{julia}
Plots.plot(
    Plots.plot(pds[i]; persistence=true)
    , barcode(pds[i])
    , Plots.heatmap(imgs_0(pds[i][1]); aspect_ratio=1)
    ,  Plots.heatmap(imgs_1(pds[i][2]); aspect_ratio=1)
    , layout = (2, 2)
    )
```

## Fitting a model

```{julia}
persims = [
    [vec(imgs_0(pds_0[i])); 
        vec(imgs_1(pds_1[i]))
    ] for i in 1:length(pds)]

X = reduce(hcat, persims)'
y = train_y .|> string
```


```{julia}
using DecisionTree
```


```{julia}
features = X
labels   = y
```


```{julia}
# model = DecisionTreeClassifier(max_depth = 5)
model = RandomForestClassifier()
fit!(model, features, labels)
# print_tree(model)
pred_y = predict(model, X)
```

```{julia}
accuracy = sum(pred_y .== y) / length(y)
accuracy = round(accuracy * 100, digits = 2)
println("The accuracy was $accuracy %!")
```

## Analysing the errors

```{julia}
errors = findall(pred_y .!= y)
```


```{julia}
i = errors[7]
println("The model predicted a $(pred_y[i]) but it was a $(y[i])")
plot_digit(pts[i])
```

```{julia}
figs[i] |> rotr90 |> image
```

How to separate "6" and "9"? They are isometric! We need more tools than functions that only take the metric into account.

!!! Ver se deu overfitting